ui_explain_tab()
runApp('inst/F')
ui <- ui_main(
ui_top_controls(),
ui_explain_tab("F", icon("info-circle"),
text = "My <strong>special</strong> text."),
#default_data_tab(),
# graph_panel(),
# compare_panel(),
# stats_panel(),
#
# debug_panel(),
)
runApp('inst/F')
ui_explain_tab("F", "info-circle",
text = "My <strong>special</strong> text.")
ui_top_controls()
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
?use_vignette
??use_vignette
use_vignette("programming", "Programming a Little App")
usethis::use_vignette("programming", "Programming a Little App")
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
data(mosaicData)
data("mosaicData")
data(package = "mosaicData")
data(package = "mosaicData") -> foo
names(foo)
foo$title
foo$header
head(foo$results)
head(foo$results$Item)
head(foo$results[Item])
head(foo$results[3])
head(foo$results[,3])
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
get_package_frames("openintro")
runApp('inst/F')
get_package_frames("LittleApp")
library(LittleApp2)
runApp('inst/F')
get_package_frames("LittleApp2")
c(get_package_frames("LittleApp2"))
as.character(get_package_frames("LittleApp2"))
library(LittleApp2)
get_package_frames("LittleApp2")
runApp('inst/F')
library(LittleApp2)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
input$frame
ls(my_env)
names(my_env)
data(input$frame, package = input$package, envir = my_env)
data(!!input$frame, package = input$package, envir = my_env)
input$frame
data("NHANES2", package = input$package, envir  = my_env)
names(my_env)
eval(input$frame)
?data
input$package
data(input$frame, package = input$package, envir = my_env)
data(eval(input$frame), package = input$package, envir = my_env)
class(input$frame)
data(list = input$frame, package = input$package, envir = my_env)
library(LittleApp2)
runApp('inst/F')
names(my_env)
head(my_env[[input$frame]])
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
names(input)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
c("hello", NULL)
b <- list("a", "b")
b[[2]]
b <- list("a", b[[2]])
b <- list("a", b[[3]])
character(0)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library shinyjs
library(shinyjs)
?toggle
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
var_names
input$covariate
hide("covariate")
?hide
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
debug_panel()
miniTabPanel()
miniTabPanel("foo")
codebook_panel()
print(codebook_panel())
print(debug_panel())
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
class(ds)
names(ds)
head(ds[[1]])
head(ds[[1]]())
runApp('inst/F')
runApp('inst/F')
names(ds)
library(LittleApp2)
runApp('inst/F')
names(ds)
head(ds$current_sample())
library(LittleApp2)
runApp('inst/F')
head(ds$current_sample)
head(ds$current_sample())
ds$current_sample()
head(ds$raw_data())
head(ds$raw_sample())
library(LittleApp2)
runApp('inst/F')
head(ds$raw_data())
head(ds$current_sample())
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
head(ds$raw_data())
head(ds$current_sample())
class(ds$current_sample)
head((ds$current_sample)())
traceback()
library(LittleApp2)
runApp('inst/F')
ds$current_sample()
library(LittleApp2)
runApp('inst/F')
head(ds$current_sample())
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
?sample
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
?modal
library(LittleApp2)
runApp('inst/F')
?show_modal
help(package = "shiny")
library(LittleApp2)
runApp('inst/F')
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
n
n
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
n
c
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
?predict.lm
?predict.glm
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
names(foo)
foo$P1
foo$P2
foo$P2$label
foo$P2$P
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
library(LittleApp2)
foo <- F_app_plot(mpg ~ hp * cyl, data = mtcars)
foo$main
foo$label
foo$side
foo$stats
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
explanatory_vars
runApp('inst/F')
n
formula
library(LittleApp2)
library(LittleApp2)
shiny::runApp('inst/F')
formula
nrow(data)
sd
R2
F
library(LittleApp2)
runApp('inst/F')
head(data)
formula
library(LittleApp2)
runApp('inst/F')
isTruthy(formula)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
input$frame
req(model_formula())
library(LittleApp2)
runApp('inst/F')
nrow(data)
library(LittleApp2)
library(LittleApp2)
runApp('inst/F')
head(current_sample())
head(data)
model_formula()
head(data)
model_formula()
current_sample()
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
current_sample()
library(LittleApp2)
runApp('inst/F')
head(current_sample())
runApp('inst/F')
Q
library(LittleApp2)
?req
library(shiny)
?req
library(LittleApp2)
library(LittleApp2)
runApp()
current_sample()
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
library(LittleApp2)
readLines(system.file("data_services.R", package = "LittleApp2"))
runApp()
head(raw_data())
head(current_sample())
current_sample
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
Q
runApp('inst/F')
names(input)
input$stratify
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
the_variables
current_variables()
head(raw_data[,1:3])
head(raw_data()[,1:3])
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
formula
runApp('inst/F')
runApp('inst/F')
formula
library(LittleApp2)
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
?icon
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
library(LittleApp2)
runApp('inst/F')
library(shiny)
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
?pmin
max(3,2)
min(3,2)
min(3,2, 1)
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp()
runApp('inst/F')
runApp('inst/F')
signif(pi,  3)
signif(10*pi, 3)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
foo <- F_app_plot(mpg ~ hp, mtcars)
foo$stats
format_stats <- function(stats) {
# this doesn't need to be a reactive. It merely takes the <stats> output
# from the main calculation and formats it.
stats$F <- with(stats,  ((n-dflex)/dflex)*(R2/(1-R2)))
res <- with(stats, glue::glue("
<ul>
<li>n = {n}</li>\n\n
<li>dflex = {dflex}</li>\n\n
<li>var_raw = {signif(var_raw,4)}</li>\n\n
<li>nvar_model = {signif(var_model,4)}</li>\n\n
</ul>
<p>thus ...</p>\n\n
<ul>
<li>R-sq = {signif(R2, 3)}</li>\n\n
<li>F = {signif(F, 2)}</li>\n\n
</ul>"))
HTML(res)
}
format_stats(foo$stats)
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
shiny::runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
Rd_db("LittleApps")
tools::Rd_db("LittleApps")
tools::Rd_db("LittleApp2")
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
names(raw_data())
input$response
range(raw_data()[[input$response]])
range(raw_data()[[input$response]], na.rm  = TRUE)
library(LittleApp2)
runApp('inst/F')
runApp('inst/F')
