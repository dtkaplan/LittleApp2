current_sample()
debug(current_sample)
current_sample()
self$.updateValue
self$.updateValue()
head(raw_data())
head(Saved_sample())
self$.updateValue()
Saved_sample()
is.data.frame(NA)
runApp('inst/T')
head(raw_data())
current_variables()
debug(current_variables)
current_variables
input$response
current_variables()
req(4)
input$response
the_variables
names(raw_data())
the_variables
library(LittleApp2)
runApp('inst/T')
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
input$frame
input$package
runApp('inst/T')
input$frame
library(LittleApp2)
runApp('inst/T')
input$frame
library(LittleApp2)
runApp('inst/T')
Current_frame()
input$frame
library(LittleApp2)
library(LittleApp2)
runApp('inst/T')
Current_frame()
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
Current_frame()
library(LittleApp2)
runApp('inst/T')
Current_frame()
head(raw_data()[,2:4])
head(current_sample()[,2:4])
req(current_sample())
library(LittleApp2)
runApp('inst/T')
the_variables
current_variables()
input$response
traceback()
library(LittleApp2)
runApp('inst/T')
current_variables()
input$response
head(raw_data()[, 2:3])
input$response
input$explanatory
library(LittleApp2)
runApp('inst/T')
input$response
input$explanatory
class(raw_data())
input$response
input$response
input$explanatory
names(raw_data())
head(current_sample())
input$frame
Current_frame()
input$package
input$response
input$explanatory
res
update_selectInput
bb <- 1:2
bb[3]
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
head(x)
summary(x)
head(x)
head(x)
head(x)
levels(x)
head(x)
attr(x, "levels")
runApp('inst/T')
runApp('inst/T')
head(yvals)
levels(data[1])
attr(data[1])
attributes(data[1])
b <- 7
attr(b, "levels")
runApp('inst/T')
runApp('inst/T')
head(data)
table(data[[2]])
names(data)
is.numeric(data[[1]])
class(data[[1]])
runApp('inst/T')
head(data)
runApp('inst/T')
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
runApp('inst/T')
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
var_names
Current_frame()
var_names
library(LittleApp2)
runApp('inst/T')
runApp('inst/T')
runApp('inst/T')
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
runApp('inst/T')
library(LittleApp2)
library(LittleApp2)
runApp('inst/T')
runApp('inst/T')
library(openintro)
View(ami.occurrences)
runApp('inst/T')
ncols(data)
ncol(data)
runApp()
library(LittleApp2)
runApp()
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(triola)
View(TDS18_Speed_Dating)
lapply(TDS18_Speed_Dating, class)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
class(TDS18_Speed_Dating)
names(TDS18_Speed_Dating)
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
Current_frame
package_names
names(db)
data(package = "Triola")
data(package = "triola")
tools::Rd_db("triola")
#' Get the names of all data sets in a package
#'
#' This is constructed from the internals of `data()`
#' It returns the names of the datasets identified in R's internal
#' compressed dataset database for the package
#'
#' @param name Name of the package
#' @param lib.loc Optional character string naming the library location
package_data_names <- function(name,  lib.loc = NULL)
{
name <- c(as.character(substitute(name)))
path <- find.package(name, lib.loc, verbose = verbose)
if (is.null(lib.loc))
path <- c(path.package(name, TRUE), if (!length(name)) getwd(),
path)
path<- unique(normalizePath(path[file.exists(path)]))
if (!dir.exists(file.path(path, "data"))) return(NULL)
dataDir <- file.path(path, "data")
names(readRDS(paste0(dataDir, "/Rdata.rdx"))$variables)
}
#' Get the names of all data sets in a package
#'
#' This is constructed from the internals of `data()`
#' It returns the names of the datasets identified in R's internal
#' compressed dataset database for the package
#'
#' @param name Name of the package
#' @param lib.loc Optional character string naming the library location
package_data_names <- function(name,  lib.loc = NULL)
{
name <- c(as.character(substitute(name)))
path <- find.package(name, lib.loc, verbose = verbose)
if (is.null(lib.loc))
path <- c(path.package(name, TRUE), if (!length(name)) getwd(),
path)
path<- unique(normalizePath(path[file.exists(path)]))
if (!dir.exists(file.path(path, "data"))) return(NULL)
dataDir <- file.path(path, "data")
names(readRDS(paste0(dataDir, "/Rdata.rdx"))$variables)
}
library(LittleApp2)
package_data_names(mosaic)
library(LittleApp2)
package_data_names(mosaic)
debug(package_data_names)
package_data_names(mosaic)
name
package_data_names(mosaic)
find.package(name, lib.loc)
library(LittleApp2)
package_data_names(mosaic)
package_data_names(mosaic)
debug(package_data_names)
package_data_names(mosaic)
package_data_names(mosaic)
library(LittleApp2)
package_data_names(mosaic)
package_data_names(mosaic)
package_data_names(mosaicData)
package_data_names(openintro)
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
package_data_names(triola)
package_data_names("triola")
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
for_logical <- dicotomize(Many_types$open  > median(Many_types$open,  na.rm=TRUE))
Many_types <-
data.frame(
open = c(142.25, 141.23, 141.33, 140.82, 141.31,
140.58),
close = c(141.37, 141.67, 140.54, 141.19, 141.07, 141.540),
volume = c(94807, 69620, 76645, 71655, 75680, 72428),
date = c("2007-01-03", "2007-01-04", "2007-01-05", "2007-01-08", "2007-01-09", "2007-01-10"),
stringsAsFactors = FALSE
) %>%
dplyr::mutate(direction = ifelse(open > close, "up", "down"),
volume = round(volume, -4),
sales = paste0('$', format(volume, big.mark = ",")),
date = as.Date(date)
)
for_logical <- dicotomize(Many_types$open  > median(Many_types$open,  na.rm=TRUE))
expect_equal(attr(for_logical, "levels"), c("false",  "true"))
library(testthat)
expect_equal(attr(for_logical, "levels"), c("false",  "true"))
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
runApp()
runApp()
runApp()
?sort
?dedup
?duplicated
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(resp)
head(resp)
attributes(resp)
runApp()
runApp()
runApp()
runApp()
library(LittleApp2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
explanatory_name()
head(explan_census)
length(unique(explan_census))
paste(paste0('\\'', attributes(data[[2]])$levels, '\\''), collapse = ' and ')
paste(paste0('<', attributes(data[[2]])$levels, '>'), collapse = ' and ')
runApp()
runApp()
head(explan_census)
paste(paste0('<', attributes(data[[2]])$levels, '>'), collapse = ' and ')
glue::glue("The explanatory variable in a t test must be
categorical with two levels. Converted the variable '{explanatory_name()}'
into two  levels:
{paste(paste0('<', attributes(data[[2]])$levels, '>'), collapse = ' and ')}.")
runApp()
head(explan_census)
table(explan_census)
glue::glue("The explanatory variable in a t test must be
categorical with two levels. Converted the variable '{explanatory_name()}'
into two levels:
{paste(paste0('<', attributes(data[[2]])$levels, '>'), collapse = ' and ')}.")
length(unique(explan_census))
runApp()
runApp()
runApp()
runApp()
runApp()
head(data)
runApp()
tmp
names(tmp)
tmp$statistic
tmp$stderr
tmp
tmp
tmp
formula
df_stats(formula, data=data, mean, mean.ci)
df_stats(formula, data=data, mean, ci.mean)
df_stats(formula, data=data, mean, sd)
df_stats(formula, data=data, mean, sd, length)
library(LittleApp2)
runApp()
runApp()
runApp()
library(LittleApp2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(LittleApp2)
runApp()
library(LittleApp2)
runApp()
runApp()
library(LittleApp2)
runApp()
runApp()
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
is.numeric(TRUE)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
head(x)
response_name()
table(x)
unique(x)
unique(x)
to_numeric
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
head(x)
class(x)
head(x)
head(factor(x))
levs
head(x)
attr(x, "levels")
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
head(response)
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
set.seed(sys.Date())
set.seed(sysDate())
set.seed(SysDate())
set.seed(Sys.Date())
Sys.Date()
Sys.Time()
?Sys.Date
Sys.time()
set.seed(Sys.time())
now <- Sys.time()
set.seed(now)
sample(1:10)
sample(1:10)
set.seed(now)
sample(1:10)
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
?sample_n
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
?sample
sample(100, size  = 3)
sample.int(100, size  = 3)
sample.int(100L, size  = 3L)
sample.int(100L, size  = 3L)
sample.int(100L, size  = 3L)
class(nrow(mtcars))
as.integer(3.2)
library(LittleApp2)
runApp('~/KaplanFiles/Packages/LittleApp2/inst/F')
library(ggformuila)
library(ggformula)
gf_violin()
?data_tab
library(LittleApp2)
?data_tab
shiny::runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
stats
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
res
runApp('inst/Bootstrap')
res
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
library(LittleApp2)
library(LittleApp2)
runApp('inst/Bootstrap')
shiny::runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
class(P)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
exists("plot_arrangement")
?exists
exists("plot_arrangement", where=0)
exists("plot_arrangement", where=1)
exists("plot_arrangement", where=2)
exists("plot_arrangement", where=3)
exists("plot_arrangement", where=4)
exists("plot_arrangement", envir = .GlobalEnv)
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
?uiOutput
library(LittleApp2)
runApp('inst/Bootstrap')
runApp()
runApp('inst/Bootstrap')
?icon
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
?show_bootstrap_ensemble
?show_bootstrap_sample_cont
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
?bootstrapper
Sys.time()
library(LittleApp2)
runApp('inst/Bootstrap')
runApp('inst/Bootstrap')
library(LittleApp2)
runApp('inst/Bootstrap')
